---
# # Voxel51 provided you with a voxel51-docker.json file, you can use the following command to create a Pull Secret:
# #
# # ```shell
# #  kubectl --namespace your-namespace-here create secret generic regcred \
# #    --from-file=.dockerconfigjson=./voxel51-docker.json --type kubernetes.io/dockerconfigjson
# # ```
# #
# # If you use the Voxel51 command above your imagePullSecrets would look like:
# imagePullSecrets:
#   - name: regcred

# # Voxel51 provided you with a license file.  You can use the following command
# # to create a fiftyoneLicenseSecret:
# #
# # ```shell
# #  kubectl --namespace your-namespace create secret generic fiftyone-license \
# #    --from-file=license=./your-license-file
# # ```
# # Then set the name(s) of your license file secret(s) here (one per org):
fiftyoneLicenseSecrets:
  - fiftyone-license

secret:
  fiftyone:
    # These secrets come from your MongoDB implementation
    fiftyoneDatabaseName: fiftyone
    mongodbConnectionString: mongodb://username:password@somehostname/?authSource=admin

    # This secret is a required random string used to encrypt session cookies.
    # To generate this string, run
    #
    # ```shell
    # openssl rand -hex 32
    # ````
    #
    cookieSecret:

    # This required key is used to encrypt storage credentials in the database.
    #   Do NOT lose this key!
    # To generate this key, run (in python)
    #
    # ```python
    # from cryptography.fernet import Fernet
    # print(Fernet.generate_key().decode())
    # ```
    #
    encryptionKey:

    # This secret is a random string used to authenticate to the CAS service.
    # This can be any string you care to use generated by any mechanism you
    #   prefer.
    # You could use something like:
    #  `cat /dev/urandom | LC_CTYPE=C tr -cd '[:graph:]' | head -c 32`
    #  to generate this string.
    # This is used for inter-service authentication and for the SuperUser to
    # authenticate at the CAS UI to configure the Central Authentication Service.
    fiftyoneAuthSecret:

# apiSettings:
#   # Set `dnsName` to expose the API for host-based routing only.
#   # See https://helm.fiftyone.ai/docs/expose-teams-api.html for more information.
#   dnsName: your-api.hostname.here
#   env:
#     # Set FIFTYONE_PLUGINS_DIR if you are enabling plugins in a dedicated
#       `teams-plugins` deployment
#     # See https://github.com/voxel51/fiftyone-teams-app-deploy/tree/main/helm/fiftyone-teams-app#fiftyone-enterprise-plugins
#     FIFTYONE_PLUGINS_DIR: /opt/plugins
#     # Set FIFTYONE_TEAMS_VERSION_OVERRIDE to override the `Install FiftyOne`
#     # bash command in the `Settings > Install FiftyOne` modal
#     FIFTYONE_TEAMS_VERSION_OVERRIDE: pip install --index-url https://privatepypi.internal.org fiftyone==2.10.0

appSettings:
  env:
    # Set FIFTYONE_PLUGINS_DIR if you are enabling plugins in the `fiftyone-app`
    # deployment
    # See https://github.com/voxel51/fiftyone-teams-app-deploy/tree/main/helm/fiftyone-teams-app#fiftyone-enterprise-plugins
    # FIFTYONE_PLUGINS_DIR: /opt/plugins

casSettings:
  env:
    FIFTYONE_AUTH_MODE: legacy

# delegatedOperatorExecutorSettings:
#   enabled: true
#   env:
#     # Set FIFTYONE_PLUGINS_DIR if you are enabling plugins in the builtin `teams-do`
#     # delegated operation orchestrator.
#     # See https://github.com/voxel51/fiftyone-teams-app-deploy/tree/main/helm/fiftyone-teams-app#builtin-delegated-operator-orchestrator
#     FIFTYONE_PLUGINS_DIR: /opt/plugins

# pluginsSettings:
#   enabled: true
#   env:
#     # Set FIFTYONE_PLUGINS_DIR if you are enabling plugins in a dedicated
#     # `teams-plugins` deployment
#     # See https://github.com/voxel51/fiftyone-teams-app-deploy/tree/main/helm/fiftyone-teams-app#fiftyone-enterprise-plugins
#     FIFTYONE_PLUGINS_DIR: /opt/plugins

teamsAppSettings:
  dnsName: your.hostname.here

# ingress:
#   annotations:
